//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     如果重新生成代码，将丢失对此文件所做的更改。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

public class AndNode : AbstractNode
{
    private AbstractNode m_left;
    private AbstractNode m_right;
    private string m_sym;

	public virtual AbstractNode AbstractNode
	{
		get;
		set;
	}

	public AndNode(AbstractNode left, string sym, AbstractNode right)
	{
        m_left = left;
        m_sym = sym;
        m_right = right;
	}

	public override int Interpret()
	{
        switch(m_sym){
            case "+":{
                return m_left.Interpret() + m_right.Interpret();
            } break;
            case "-":{
                return m_left.Interpret() - m_right.Interpret();
            } break;
            case "*":{
                return m_left.Interpret() * m_right.Interpret();
            } break;
            case "/":{
                return m_left.Interpret() / m_right.Interpret();
            } break;
            default: return -99999;
        }
        //if (m_sym.Equals("+"))
        //{
        //    return m_left.Interpret() + m_right.Interpret();
        //}
        //else
        //{
        //    if (m_sym.Equals("-"))
        //    {
        //        return m_left.Interpret() - m_right.Interpret();
        //    }
        //    else
        //    {
        //        if (m_sym.Equals("*"))
        //        {
        //            return m_left.Interpret() * m_right.Interpret();
        //        }
        //        else
        //        {
        //            return m_left.Interpret() / m_right.Interpret();
        //        }
        //    }
        //}
	}

}

